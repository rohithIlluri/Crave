rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      // Admins can read all user documents
      allow read: if request.auth != null && 
        isAdmin(request.auth.uid);
    }
    
    // Listings collection
    match /listings/{document} {
      allow read: if true; // Public read access
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.producerId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.producerId || 
         isAdmin(request.auth.uid));
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.producerId || 
         isAdmin(request.auth.uid));
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      allow read: if request.auth != null && 
        isAdmin(request.auth.uid);
        
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Helper function to check if user is admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
  }
}
